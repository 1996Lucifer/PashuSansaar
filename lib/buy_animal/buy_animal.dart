import 'dart:typed_data';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:csv/csv.dart';
import 'package:dhenu/utils/colors.dart';
import 'package:dhenu/utils/reusable_widgets.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:geocoder/geocoder.dart';
import 'package:geodesy/geodesy.dart';
import 'package:get/get.dart';
import 'package:progress_dialog/progress_dialog.dart';
import 'package:intl/intl.dart' as intl;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:url_launcher/url_launcher.dart' as UrlLauncher;
import 'package:carousel_slider/carousel_slider.dart';
import 'package:share/share.dart';
import 'package:esys_flutter_share/esys_flutter_share.dart' as eshare;
import 'package:screenshot/screenshot.dart';

class BuyAnimal extends StatefulWidget {
  List animalInfo;
  final String userName;
  BuyAnimal({
    Key key,
    @required this.animalInfo,
    @required this.userName,
  }) : super(key: key);

  @override
  _BuyAnimalState createState() => _BuyAnimalState();
}

class _BuyAnimalState extends State<BuyAnimal> {
  var formatter = intl.NumberFormat('#,##,000');

  Uint8List _imageFile;
  int _current = 0;

  // List widget.animalInfo = [];
  ProgressDialog pr;
  String _locality = '';
  double _latitude = 0.0, _longitude = 0.0;
  ScreenshotController screenshotController = ScreenshotController();

  @override
  void initState() {
    // getInitialInfo();
    // dataFillOnInit();
    getLatLong();
    super.initState();
  }

  getLatLong() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    setState(() {
      _latitude = prefs.getDouble('latitude');
      _longitude = prefs.getDouble('longitude');
    });
  }

  getInitialInfo() async {
    // await Firebase.initializeApp();
    pr = new ProgressDialog(context,
        type: ProgressDialogType.Normal, isDismissible: false);

    // SharedPreferences prefs = await SharedPreferences.getInstance();

    pr.style(message: 'progress_dialog_message'.tr);
    pr.show();

    FirebaseFirestore.instance
        .collection("buyingAnimalList")
        .get(GetOptions(source: Source.serverAndCache))
        .then(
      (value) {
        List _info = [];
        value.docs.forEach((element) {
          _info.add(element.data());
        });

        setState(() {
          widget.animalInfo = _info;
        });
        pr.hide();
      },
    );
  }

  // dataFillOnInit() async {
  //   await Firebase.initializeApp();

  //   final myData = await rootBundle.loadString("assets/file/animal_data.csv");
  //   List<List<dynamic>> data = CsvToListConverter().convert(myData);

  //   for (int i = 1; i <= data.length - 1; i++)
  //     await FirebaseFirestore.instance
  //         .collection("buyingAnimalList")
  //         .doc()
  //         .set({
  //       "userAnimalDescription": data[i][0].toString(),
  //       "userAnimalType": data[i][1].toString(),
  //       "userAnimalGender": data[i][2].toString(),
  //       "userAddress": data[i][3].toString(),
  //       "userName": data[i][4].toString(),
  //       // "image": data[i][5].toString(),

  //       "animalImages": {
  //         "image1": data[i][5].toString(),
  //         "image2":
  //             "",
  //         "image3": "",
  //         "image4": ""
  //       },

  //       "animalInfo": {
  //         "animalAge": "4",
  //         "animalBreed": "मुर्रा (Murrah)",
  //         "animalPrice": "12345",
  //         "animalType": "भैंसा",
  //         "animalIsPregnant": "",
  //         "animalMilk": "",
  //         "animalMilkCapacity": ""
  //       },
  //       "userAnimalPrice": data[i][6].toString(),
  //       "userAnimalBreed": data[i][7].toString(),
  //       "userMobileNumber": data[i][8].toString(),
  //       "userAnimalMilk": data[i][9].toString(),
  //       "userAnimalPregnancy": data[i][10].toString(),
  //       "userLatitude": data[i][11].toString(),
  //       "userLongitude": data[i][12].toString(),
  //       "dateOfSaving": ReusableWidgets.dateTimeToEpoch(DateTime.now())
  //     });
  // }

  bayaatMapping(bayaat) {
    String bayaaat = '';
    switch (bayaat) {
      case '0':
        bayaaat = 'zero'.tr;
        break;
      case '1':
        bayaaat = 'first'.tr + ' ' + 'animal_is_pregnant'.tr;

        break;
      case '2':
        bayaaat = 'second'.tr + ' ' + 'animal_is_pregnant'.tr;

        break;
      case '3':
        bayaaat = 'third'.tr + ' ' + 'animal_is_pregnant'.tr;

        break;
      case '4':
        bayaaat = 'fourth'.tr + ' ' + 'animal_is_pregnant'.tr;

        break;
      case '5':
        bayaaat = 'fifth'.tr + ' ' + 'animal_is_pregnant'.tr;

        break;
      case '6':
        bayaaat = 'sixth'.tr + ' ' + 'animal_is_pregnant'.tr;

        break;
      case '7':
        bayaaat = 'seventh'.tr + ' ' + 'animal_is_pregnant'.tr;

        break;
    }

    return bayaaat;
  }

  getPositionBasedOnLatLong(double lat, double long) async {
    final coordinates = new Coordinates(lat, long);
    var addresses =
        await Geocoder.local.findAddressesFromCoordinates(coordinates);
    var first = addresses.first;

    return first.locality ?? first.featureName;
  }

  Row _buildInfowidget(index) => Row(
        children: [
          Padding(
            padding: const EdgeInsets.all(8),
            child: RichText(
              textAlign: TextAlign.center,
              text: TextSpan(
                  text: widget.animalInfo[index]['userAnimalMilk'],
                  style: TextStyle(
                      color: Colors.grey[700],
                      fontWeight: FontWeight.bold,
                      fontSize: 16),
                  children: [
                    TextSpan(
                      text: ' ',
                      style: TextStyle(
                          color: Colors.grey[700],
                          fontWeight: FontWeight.bold,
                          fontSize: 16),
                    ),
                    TextSpan(
                      text: "litre_milk".tr,
                      style: TextStyle(
                          color: Colors.grey[700],
                          fontWeight: FontWeight.bold,
                          fontSize: 16),
                    ),
                    TextSpan(
                      text: ', ',
                      style: TextStyle(
                          color: Colors.grey[700],
                          fontWeight: FontWeight.bold,
                          fontSize: 16),
                    ),
                    TextSpan(
                      text: bayaatMapping(
                          widget.animalInfo[index]['userAnimalPregnancy']),
                      style: TextStyle(
                          color: Colors.grey[700],
                          fontWeight: FontWeight.bold,
                          fontSize: 16),
                    ),
                    TextSpan(
                      text: ', ',
                      style: TextStyle(
                          color: Colors.grey[700],
                          fontWeight: FontWeight.bold,
                          fontSize: 16),
                    ),
                    TextSpan(
                      text: '₹ ' +
                              formatter.format(int.parse(widget
                                  .animalInfo[index]['userAnimalPrice'])) ??
                          0,
                      style: TextStyle(
                          color: Colors.grey[700],
                          fontWeight: FontWeight.bold,
                          fontSize: 16),
                    ),
                  ]),
            ),
          ),
        ],
      );

  @override
  Widget build(BuildContext context) {
    // return Scaffold(
    //   backgroundColor: Colors.grey[100],
    //   appBar: ReusableWidgets.getAppBar(context, "app_name".tr, false),
    //   body:
    return RefreshIndicator(
      color: primaryColor,
      onRefresh: () => getInitialInfo(),
      child: Column(
        children: [
          // Text("data"),
          // Padding(
          //   padding: const EdgeInsets.all(0.0),
          //   child: Container(
          //     height: 40,
          //     child: Text('your_selling_animal_info'.tr),
          //   ),
          // ),
          // Screenshot(
          //   key: GlobalKey<ScreenshotState>(
          //       debugLabel: index.toString()),
          //   controller: screenshotController,
          //   child:

          Expanded(
            child: ListView.builder(
                physics: BouncingScrollPhysics(),
                itemBuilder: (context, index) {
                  return Padding(
                      padding:
                          const EdgeInsets.only(left: 8.0, right: 8, top: 8),
                      child: Card(
                        key: Key(index.toString()),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10.0),
                        ),
                        elevation: 5,
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            _buildInfowidget(index),
                            _distanceTimeMethod(index),
                            _animalImageWidget(index),
                            _animalDescriptionMethod(index),
                            Container(
                                decoration: BoxDecoration(
                                  color: Colors.grey[100],
                                  boxShadow: [
                                    BoxShadow(
                                      color: Colors.grey,
                                      blurRadius: 1.0,
                                    ),
                                  ],
                                  borderRadius: BorderRadius.circular(8),
                                ),
                                height: 80,
                                child: Padding(
                                  padding: const EdgeInsets.all(8.0),
                                  child: Row(children: [
                                    Image.asset('assets/images/profile.jpg',
                                        width: 40, height: 40),
                                    SizedBox(
                                      width: 5,
                                    ),
                                    Expanded(
                                      child: Text(
                                        widget.animalInfo[index]['userName'],
                                        style: TextStyle(
                                            fontSize: 15,
                                            fontWeight: FontWeight.bold,
                                            color: Colors.black),
                                      ),
                                    ),
                                    RaisedButton.icon(
                                        shape: RoundedRectangleBorder(
                                            borderRadius:
                                                BorderRadius.circular(18.0),
                                            side: BorderSide(
                                                color: darkSecondaryColor)),
                                        color: secondaryColor,
                                        onPressed: () => UrlLauncher.launch(
                                            'tel:+91 ${widget.animalInfo[index]['userMobileNumber']}'),
                                        icon: Icon(
                                          Icons.call,
                                          color: Colors.white,
                                          size: 14,
                                        ),
                                        label: Text('call'.tr,
                                            style: TextStyle(
                                                color: Colors.white,
                                                fontWeight: FontWeight.bold,
                                                fontSize: 14))),
                                    SizedBox(
                                      width: 5,
                                    ),
                                    RaisedButton.icon(
                                        shape: RoundedRectangleBorder(
                                            borderRadius:
                                                BorderRadius.circular(18.0),
                                            side: BorderSide(
                                                color: darkGreenColor)),
                                        color: darkGreenColor,
                                        onPressed: () async {
                                          String whatsappText = '';
                                          SharedPreferences prefs =
                                              await SharedPreferences
                                                  .getInstance();
                                          getPositionBasedOnLatLong(
                                                  prefs.getDouble('latitude'),
                                                  prefs.getDouble('longitude'))
                                              .then((result) {
                                            setState(() {
                                              whatsappText =
                                                  'नमस्कार भाई साहब, मैंने आपका पशु देखा पशुसंसार पे और आपसे आगे बात करना चाहता हूँ. कब बात कर सकते हैं? ${widget.userName}, $result \n\nपशुसंसार सूचना - ऑनलाइन पेमेंट के धोखे से बचने के लिए कभी भी ऑनलाइन  एडवांस पेमेंट, एडवांस, जमा राशि, ट्रांसपोर्ट इत्यादि के नाम पे, किसी भी एप से न करें वरना नुकसान हो सकता है';
                                            });
                                          });
                                          var whatsappUrl =
                                              "whatsapp://send?phone=+91 ${widget.animalInfo[index]['userMobileNumber']}?text=$whatsappText";
                                          await UrlLauncher.canLaunch(
                                                      whatsappUrl) !=
                                                  null
                                              ? UrlLauncher.launch(whatsappUrl)
                                              : ScaffoldMessenger.of(context)
                                                  .showSnackBar(SnackBar(
                                                  content: Text(
                                                      '${widget.animalInfo[index]['userMobileNumber']} is not present in Whatsapp'),
                                                  duration: Duration(
                                                      milliseconds: 300),
                                                  padding: EdgeInsets.symmetric(
                                                      horizontal: 8),
                                                  behavior:
                                                      SnackBarBehavior.floating,
                                                  shape: RoundedRectangleBorder(
                                                    borderRadius:
                                                        BorderRadius.circular(
                                                            10.0),
                                                  ),
                                                ));
                                        },
                                        icon: FaIcon(FontAwesomeIcons.whatsapp,
                                            color: Colors.white, size: 14),
                                        label: Text('message'.tr,
                                            style: TextStyle(
                                                color: Colors.white,
                                                fontWeight: FontWeight.bold,
                                                fontSize: 14)))
                                  ]),
                                ))
                          ],
                        ),
                      )
                      // ),
                      );
                },
                itemCount: widget.animalInfo.length),
          ),
        ],
        // ),
      ),
    );
  }

  Padding _animalDescriptionMethod(int index) {
    return Padding(
      padding: const EdgeInsets.all(8.0),
      child: Text(
        widget.animalInfo[index]['userAnimalDescription'],
        maxLines: 4,
        overflow: TextOverflow.ellipsis,
        style: TextStyle(color: Colors.grey[600], fontSize: 14.5),
      ),
    );
  }

  Padding _animalImageWidget(int index) {
    return Padding(
        padding: EdgeInsets.only(left: 8.0, right: 8, bottom: 4),
        child: Stack(
          children: [
            GestureDetector(
              onTap: () {
                return Navigator.of(context).push(PageRouteBuilder(
                  opaque: true,
                  pageBuilder: (BuildContext context, _, __) => Column(
                    children: [
                      CarouselSlider(
                        options: CarouselOptions(
                            height: MediaQuery.of(context).size.height * 0.9,
                            viewportFraction: 1.0,
                            initialPage: 0,
                            enableInfiniteScroll: true,
                            reverse: false,
                            autoPlay: true,
                            autoPlayInterval: Duration(seconds: 3),
                            autoPlayAnimationDuration:
                                Duration(milliseconds: 800),
                            autoPlayCurve: Curves.fastOutSlowIn,
                            enlargeCenterPage: true,
                            scrollDirection: Axis.horizontal,
                            onPageChanged: (index, reason) {
                              setState(() {
                                _current = index;
                              });
                            }),
                        items: [
                          widget.animalInfo[index]['image'],
                          widget.animalInfo[index]['image'],
                          widget.animalInfo[index]['image'],
                        ].map((i) {
                          return Builder(
                            builder: (BuildContext context) {
                              return Image.network('$i');
                            },
                          );
                        }).toList(),
                      ),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          widget.animalInfo[index]['image'],
                          widget.animalInfo[index]['image'],
                          widget.animalInfo[index]['image'],
                        ].map((url) {
                          int indexData = [
                            widget.animalInfo[index]['image'],
                            widget.animalInfo[index]['image'],
                            widget.animalInfo[index]['image'],
                          ].indexOf(url);
                          return Container(
                            width: 8.0,
                            height: 8.0,
                            margin: EdgeInsets.symmetric(
                                vertical: 10.0, horizontal: 2.0),
                            decoration: BoxDecoration(
                              shape: BoxShape.circle,
                              color: _current == indexData
                                  ? Color.fromRGBO(255, 255, 255, 1)
                                  : Color.fromRGBO(255, 255, 255, 0.4),
                            ),
                          );
                        }).toList(),
                      ),
                    ],
                  ),
                ));

                // showDialog(
                //     context: context,
                //     builder: (context) {
                //       return AlertDialog(
                //           backgroundColor: Colors.transparent,
                //           // title: Text(''),
                //           content: CarouselSlider(
                //             options: CarouselOptions(
                //               height: MediaQuery.of(context).size.height,
                //               viewportFraction: 1.0,
                //               initialPage: 0,
                //               enableInfiniteScroll: true,
                //               reverse: false,
                //               autoPlay: true,
                //               autoPlayInterval: Duration(seconds: 3),
                //               autoPlayAnimationDuration:
                //                   Duration(milliseconds: 800),
                //               autoPlayCurve: Curves.fastOutSlowIn,
                //               enlargeCenterPage: true,
                //               scrollDirection: Axis.vertical,
                //             ),
                //             items: [
                //               widget.animalInfo[index]['image'],
                //               widget.animalInfo[index]['image'],
                //               widget.animalInfo[index]['image'],
                //             ].map((i) {
                //               return Builder(
                //                 builder: (BuildContext context) {
                //                   return Image.network('$i');
                //                   // return Container(
                //                   //   // height: 500.0,
                //                   //   decoration: BoxDecoration(
                //                   //     image: DecorationImage(
                //                   //         fit: BoxFit.cover,
                //                   //         image: NetworkImage('$i')),
                //                   //     borderRadius: BorderRadius.all(
                //                   //         Radius.circular(8.0)),
                //                   //     color: Colors.redAccent,
                //                   //   ),
                //                   // );
                //                 },
                //               );
                //             }).toList(),
                //           ),
                //           actions: <Widget>[
                //             FlatButton(
                //                 child: Text(
                //                   'Ok'.tr,
                //                   style: TextStyle(color: Colors.white),
                //                 ),
                //                 onPressed: () {
                //                   Navigator.pop(context);
                //                 }),
                //           ]);
                //     });
              },
              child: Container(
                height: 200.0,
                decoration: BoxDecoration(
                  image: DecorationImage(
                      fit: BoxFit.cover,
                      image: NetworkImage(widget.animalInfo[index]['image'])),
                  borderRadius: BorderRadius.all(Radius.circular(8.0)),
                  color: Colors.redAccent,
                ),
              ),
            ),
            Positioned(
              right: 0,
              child: RaisedButton.icon(
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(18.0),
                      side: BorderSide(color: violetColor)),
                  color: violetColor,
                  onPressed: () async {
                    // _imageFile = null;
                    // screenshotController
                    //     .capture(delay: Duration(milliseconds: 10))
                    //     .then((Uint8List image) {
                    //   // setState(() {
                    //   _imageFile = image;
                    //   // });
                    // }).catchError((onError) {
                    //   print(onError);
                    // });

                    Share.share(
                        "Type: ${widget.animalInfo[index]['userAnimalBreed']}\nDescription: ${widget.animalInfo[index]['userAnimalDescription']}\nGender: ${widget.animalInfo[index]['userAnimalGender']}\nMilk: ${widget.animalInfo[index]['userAnimalMilk']} Litre",
                        subject: 'Share Animal Info');
                    // await eshare.Share.file(
                    //     'Image', 'info.png', _imageFile, 'image/png',
                    //     text: 'My optional text.');
                  },
                  icon: Icon(Icons.share, color: Colors.white, size: 14),
                  label: Text('share'.tr,
                      style: TextStyle(
                          color: Colors.white,
                          fontWeight: FontWeight.bold,
                          fontSize: 14))),
            )
          ],
        ));
  }

  Padding _distanceTimeMethod(int index) => Padding(
        padding: const EdgeInsets.all(8.0),
        child: Row(
          children: [
            FaIcon(
              FontAwesomeIcons.clock,
              color: Colors.grey[500],
              size: 13,
            ),
            RichText(
              textAlign: TextAlign.center,
              text: TextSpan(
                  text: ' ' +
                      ReusableWidgets.dateDifference(
                          ReusableWidgets.epochToDateTime(
                              widget.animalInfo[index]['dateOfSaving'])),
                  style: TextStyle(
                      color: Colors.grey[500],
                      fontWeight: FontWeight.bold,
                      fontSize: 13),
                  children: [
                    TextSpan(
                      text: ' | ',
                      style: TextStyle(
                          color: Colors.grey[500],
                          fontWeight: FontWeight.bold,
                          fontSize: 13),
                    ),
                  ]),
            ),
            Icon(
              Icons.location_on_outlined,
              color: Colors.grey[500],
              size: 13,
            ),
            RichText(
              textAlign: TextAlign.center,
              text: TextSpan(
                  text: ' ' + _locality.toString(),
                  style: TextStyle(
                      color: Colors.grey[500],
                      fontWeight: FontWeight.bold,
                      fontSize: 13),
                  children: [
                    TextSpan(
                      text: ' ( ' + 'approx'.tr + ' ',
                      style: TextStyle(
                          color: Colors.grey[500],
                          // fontWeight: FontWeight.bold,
                          fontSize: 13),
                    ),
                    TextSpan(
                      text:
                          _distanceBetweenTwoCoordinates(index) + ' ' + 'km'.tr,
                      style: TextStyle(
                          color: Colors.grey[800],
                          fontWeight: FontWeight.bold,
                          fontSize: 13),
                    ),
                    TextSpan(
                      text: ' )',
                      style: TextStyle(color: Colors.grey[500], fontSize: 13),
                    )
                  ]),
            ),
          ],
        ),
      );

  String _distanceBetweenTwoCoordinates(int index) {
    getPositionBasedOnLatLong(
            double.parse(widget.animalInfo[index]['userLatitude']),
            double.parse(widget.animalInfo[index]['userLongitude']))
        .then((result) => setState(() {
              _locality = result;
            }));

    return (Geodesy().distanceBetweenTwoGeoPoints(
              LatLng(_latitude, _longitude),
              LatLng(double.parse(widget.animalInfo[index]['userLatitude']),
                  double.parse(widget.animalInfo[index]['userLongitude'])),
            ) /
            1000)
        .toStringAsFixed(0);
  }
}
